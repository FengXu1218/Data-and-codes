setwd("/Users/xufeng/Desktop/others/Kluyveromyces/countdata2/DEseq_vst/DEseq_DEG.csv/")
load("KM_GO.Rdata")
goterm_gene <- go_term2gene[go_term2gene$go_term == GO_ID,]
k_aa <- read.csv(file = "k_aa_DEseq_DEG.csv")
k_bb <- read.csv(file = "k_bb_DEseq_DEG.csv")
ab_f <- read.csv(file = "ab_f_DEseq_DEG.csv")
k_ab <- read.csv(file = "k_ab_DEseq_DEG.csv")
k_aa_FC <- k_aa[k_aa$X %in% goterm_gene$gene,c("X","log2FoldChange")]
k_bb_FC <- k_bb[k_bb$X %in% goterm_gene$gene,c("X","log2FoldChange")]
ab_f_FC <- ab_f[ab_f$X %in% goterm_gene$gene,c("X","log2FoldChange")]
k_ab_FC <- k_ab[k_ab$X %in% goterm_gene$gene,c("X","log2FoldChange")]
k_aa_FC <- k_aa_FC[order(k_aa_FC$X),]
k_bb_FC <- k_bb_FC[order(k_bb_FC$X),]
ab_f_FC <- ab_f_FC[order(ab_f_FC$X),]
k_ab_FC <- k_ab_FC[order(k_ab_FC$X),]
goterm_gene_k_aa <- goterm_gene[goterm_gene$gene %in% k_aa_FC$X,]
data.file_k_aa <- cbind(k_aa_FC,goterm_gene_k_aa)[,-1]
data.file_k_aa$Group <- "k_aa"
#  goterm_gene_k_ab <- goterm_gene[goterm_gene$gene %in% k_ab_FC$X,]
#  data.file_k_ab <- cbind(k_ab_FC,goterm_gene_k_ab)[,-1]
#  data.file_k_ab$Group <- "k_ab"
goterm_gene_k_bb <- goterm_gene[goterm_gene$gene %in% k_bb_FC$X,]
data.file_k_bb <- cbind(k_bb_FC,goterm_gene_k_bb)[,-1]
data.file_k_bb$Group <- "k_bb"
goterm_gene_ab_f <- goterm_gene[goterm_gene$gene %in% ab_f_FC$X,]
data.file_ab_f <- cbind(ab_f_FC,goterm_gene_ab_f)[,-1]
data.file_ab_f$Group <- "ab_f"
data.file <- rbind(data.file_k_aa,data.file_k_bb,data.file_ab_f)
data.file$Group <- factor(data.file$Group,levels = c("k_aa","k_bb","ab_f"))
population <- data.file_k_aa[,1]
n <- nrow(data.file_k_aa)
reps <- 1000
results <- numeric(reps)
for (i in 1:1000){
samp <- sample(population, n,replace = T)
results[i] <- median(samp)
}
var <- var(results)
x2 <- (median(population))^2/var
p__kaa <- round(1-pchisq(x2,1),7)
population <- data.file_k_bb[,1]
n <- nrow(data.file_k_bb)
reps <- 1000
results <- numeric(reps)
for (i in 1:1000){
samp <- sample(population, n,replace = T)
results[i] <- median(samp)
}
var <- var(results)
x2 <- (median(population))^2/var
p__kbb <- round(1-pchisq(x2,1),7)
population <- data.file_ab_f[,1]
n <- nrow(data.file_ab_f)
reps <- 1000
results <- numeric(reps)
for (i in 1:1000){
samp <- sample(population, n,replace = T)
results[i] <- median(samp)
}
var <- var(results)
x2 <- (median(population))^2/var
p__abf <- round(1-pchisq(x2,1),7)
data.file$p_value <- c(rep(p__kaa,nrow(data.file_k_aa)),rep(p__kbb,nrow(data.file_k_bb)),rep(p__abf,nrow(data.file_ab_f)))
a <- data.file$p_value == 0
data.file[a,"p_value"] <- 1e-32
View(data.file)
GO_GEP <- function(GO_ID){
setwd("/Users/xufeng/Desktop/others/Kluyveromyces/countdata2/DEseq_vst/DEseq_DEG.csv/")
load("KM_GO.Rdata")
goterm_gene <- go_term2gene[go_term2gene$go_term == GO_ID,]
k_aa <- read.csv(file = "k_aa_DEseq_DEG.csv")
k_bb <- read.csv(file = "k_bb_DEseq_DEG.csv")
ab_f <- read.csv(file = "ab_f_DEseq_DEG.csv")
k_ab <- read.csv(file = "k_ab_DEseq_DEG.csv")
k_aa_FC <- k_aa[k_aa$X %in% goterm_gene$gene,c("X","log2FoldChange")]
k_bb_FC <- k_bb[k_bb$X %in% goterm_gene$gene,c("X","log2FoldChange")]
ab_f_FC <- ab_f[ab_f$X %in% goterm_gene$gene,c("X","log2FoldChange")]
k_ab_FC <- k_ab[k_ab$X %in% goterm_gene$gene,c("X","log2FoldChange")]
k_aa_FC <- k_aa_FC[order(k_aa_FC$X),]
k_bb_FC <- k_bb_FC[order(k_bb_FC$X),]
ab_f_FC <- ab_f_FC[order(ab_f_FC$X),]
k_ab_FC <- k_ab_FC[order(k_ab_FC$X),]
goterm_gene_k_aa <- goterm_gene[goterm_gene$gene %in% k_aa_FC$X,]
data.file_k_aa <- cbind(k_aa_FC,goterm_gene_k_aa)[,-1]
data.file_k_aa$Group <- "k_aa"
#  goterm_gene_k_ab <- goterm_gene[goterm_gene$gene %in% k_ab_FC$X,]
#  data.file_k_ab <- cbind(k_ab_FC,goterm_gene_k_ab)[,-1]
#  data.file_k_ab$Group <- "k_ab"
goterm_gene_k_bb <- goterm_gene[goterm_gene$gene %in% k_bb_FC$X,]
data.file_k_bb <- cbind(k_bb_FC,goterm_gene_k_bb)[,-1]
data.file_k_bb$Group <- "k_bb"
goterm_gene_ab_f <- goterm_gene[goterm_gene$gene %in% ab_f_FC$X,]
data.file_ab_f <- cbind(ab_f_FC,goterm_gene_ab_f)[,-1]
data.file_ab_f$Group <- "ab_f"
data.file <- rbind(data.file_k_aa,data.file_k_bb,data.file_ab_f)
data.file$Group <- factor(data.file$Group,levels = c("k_aa","k_bb","ab_f"))
population <- data.file_k_aa[,1]
n <- nrow(data.file_k_aa)
reps <- 1000
results <- numeric(reps)
for (i in 1:1000){
samp <- sample(population, n,replace = T)
results[i] <- median(samp)
}
var <- var(results)
x2 <- (median(population))^2/var
p__kaa <- round(1-pchisq(x2,1),7)
population <- data.file_k_bb[,1]
n <- nrow(data.file_k_bb)
reps <- 1000
results <- numeric(reps)
for (i in 1:1000){
samp <- sample(population, n,replace = T)
results[i] <- median(samp)
}
var <- var(results)
x2 <- (median(population))^2/var
p__kbb <- round(1-pchisq(x2,1),7)
population <- data.file_ab_f[,1]
n <- nrow(data.file_ab_f)
reps <- 1000
results <- numeric(reps)
for (i in 1:1000){
samp <- sample(population, n,replace = T)
results[i] <- median(samp)
}
var <- var(results)
x2 <- (median(population))^2/var
p__abf <- round(1-pchisq(x2,1),7)
data.file$p_value <- c(rep(p__kaa,nrow(data.file_k_aa)),rep(p__kbb,nrow(data.file_k_bb)),rep(p__abf,nrow(data.file_ab_f)))
a <- data.file$p_value == 0
data.file[a,"p_value"] <- 1e-32
#  for (i in nrow(data.file)){
#    if (data.file$p_value[i] == 0){
#      data.file$p_value[i] = 1}
#    }
e<-data.file %>%
ggviolin(x = "Group", y = "log2FoldChange", fill = "Group",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"),##
title = GO_ID, font.title = c(30,"red"),
font.y = c(25),
font.subtitle = c(20),
xlab="",
ylab="log2FoldChange",ylim=c(-3,3),
add = "boxplot", add.params = list(fill = "white"))
e+font("axis.text",size = 25)+geom_hline(aes(yintercept=0),color="#33CCFF",linetype = "dashed")+geom_text(aes(label = paste0("p <= ",p_value),y = 3),vjust = 0)
ggsave(filename = paste0(paste0("./GO_violin/",GO_ID),"_plot.png"),width = 8.5,height =6.5 )
}
GO <- c("GO:0070726","GO:0000278","GO:0043436","GO:0006260","GO:0005856","GO:0022857","GO:0007010")
for (i in 1:7) {
GO_GEP(GO_ID = GO[i])
}
a <- matrix(c(1/(2^0.5),-1/(2^0.5),1/(2^0.5),1/(2^0.5),2,2)
)
a <- matrix(c(1/(2^0.5),-1/(2^0.5),1/(2^0.5),1/(2^0.5)),2,2)
View(a)
a <- matrix(c(1/(2^0.5),1/(2^0.5),-1/(2^0.5),1/(2^0.5)),2,2)
sovle(a)
solve(a)
getwd()
setwd("/Users/xufeng/Desktop/k_f_Sce/")
load(file = "all_Sc_combat_fpkm.csv")
all_Sc_combat_fpkm <- read.csv(file = "all_Sc_combat_fpkm.csv")
all_S <- t(all_Sc_combat_fpkm[,c(26:60)])
rm(list = ls())
all_Sc_combat_fpkm <- read.csv(file = "all_Sc_combat_fpkm.csv")
all_S <- t(all_Sc_combat_fpkm[,c(26:60)])
data <- t(all_S1)
dat <- scale(data) #标准化
View(all_Sc_combat_fpkm)
rownames(all_Sc_combat_fpkm) <- all_Sc_combat_fpkm[,1]
all_Sc_combat_fpkm <- all_Sc_combat_fpkm[,-1]
all_S1 <- all_Sc_combat_fpkm[,c(1:21)]
all_S <- t(all_Sc_combat_fpkm[,c(26:60)])
data <- t(all_S1)
dat <- scale(data) #标准化
covdat <- cov(dat)  #求协方差矩阵
eigendat <- eigen(covdat)  #求特征值、特征向量
eigenValue <- eigendat$values  #特征值
eigenVector <- eigendat$vectors  #特征向量
order_value <- order(eigenValue,decreasing = T)  #由大到小排列特征值
values <- eigenValue[order_value]
valueSum <- sum(values)
cumVar <- cumsum(values)/valueSum * 100  #计算主成分得分。
order_vector <- eigenVector[,order_value]
Means <- apply(data,2,mean)
sd <- apply(data,2,sd)
data_SC <- data.frame(row.names = rownames(all_S))
eigenValue
## In this example, the data is in a matrix called
## data.matrix
## columns are individual samples (i.e. cells)
## rows are measurements taken for all the samples (i.e. genes)
## Just for the sake of the example, here's some made up data...
data.matrix <- matrix(nrow=100, ncol=10)
colnames(data.matrix) <- c(
paste("wt", 1:5, sep=""),
paste("ko", 1:5, sep=""))
rownames(data.matrix) <- paste("gene", 1:100, sep="")
for (i in 1:100) {
wt.values <- rpois(5, lambda=sample(x=10:1000, size=1))
ko.values <- rpois(5, lambda=sample(x=10:1000, size=1))
data.matrix[i,] <- c(wt.values, ko.values)
}
head(data.matrix)
dim(data.matrix)
pca <- prcomp(t(data.matrix), scale=TRUE)
View(pca)
rownames(data_SC) <- rownames(all_S)
colnames(data_SC) <- colnames(all_S)
rownames(data_SC) <- rownames(all_S1)
for (i in 1:1244) {
data_SC[,i] <- (all_S[,i]-Means[i])/sd[i]
}
rownames(data_SC) <- rownames(all_S1)
rownames(data_SC) <- rownames(all_S)
colnames(data_SC) <- colnames(all_S)
dat_new <- as.matrix(rbind(dat,data_SC1))
dat_new <- as.matrix(rbind(dat,data_SC))
#rownames(order_vector) <- group_list
#colnames(order_vector) <- paste0("PC",c(1:15))
principal <- dat_new %*% order_vector  #求解主成分
View(principal)
table(principal)
class(principal)
stack(principal)
dim(principal)
## plot pc1 and pc2
plot(pca$x[,1], pca$x[,2])
## make a scree plot
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
## now make a fancy looking plot that shows the PCs and the variation:
library(ggplot2)
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
pca.data
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
## get the name of the top 10 measurements (genes) that contribute
## most to pc1.
loading_scores <- pca$rotation[,1]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes ## show the names of the top 10 genes
pca$rotation[top_10_genes,1] ## show the scores (and +/- sign)
svd.stuff <- svd(scale(t(data.matrix), center=TRUE))
## calculate the PCs
svd.data <- data.frame(Sample=colnames(data.matrix),
X=(svd.stuff$u[,1] * svd.stuff$d[1]),
Y=(svd.stuff$u[,2] * svd.stuff$d[2]))
svd.data
## alternatively, we could compute the PCs with the eigen vectors and the
## original data
svd.pcs <- t(t(svd.stuff$v) %*% t(scale(t(data.matrix), center=TRUE)))
svd.pcs[,1:2] ## the first to principal components
svd.df <- ncol(data.matrix) - 1
svd.var <- svd.stuff$d^2 / svd.df
svd.var.per <- round(svd.var/sum(svd.var)*100, 1)
ggplot(data=svd.data, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC1 - ", svd.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", svd.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("svd(scale(t(data.matrix), center=TRUE)")
############################################
##
## Now let's do the same thing with eigen()
##
## eigen() returns two things...
## vectors = eigen vectors (vectors of loading scores)
##           NOTE: pcs = sum(loading scores * values for sample)
## values = eigen values
############################################
cov.mat <- cov(scale(t(data.matrix), center=TRUE))
dim(cov.mat)
## since the covariance matrix is symmetric, we can tell eigen() to just
## work on the lower triangle with "symmetric=TRUE"
eigen.stuff <- eigen(cov.mat, symmetric=TRUE)
dim(eigen.stuff$vectors)
head(eigen.stuff$vectors[,1:2])
eigen.pcs <- t(t(eigen.stuff$vectors) %*% t(scale(t(data.matrix), center=TRUE)))
eigen.pcs[,1:2]
eigen.data <- data.frame(Sample=rownames(eigen.pcs),
X=(-1 * eigen.pcs[,1]), ## eigen() flips the X-axis in this case, so we flip it back
Y=eigen.pcs[,2]) ## X axis will be PC1, Y axis will be PC2
eigen.data
dim(cov.mat)
## since the covariance matrix is symmetric, we can tell eigen() to just
## work on the lower triangle with "symmetric=TRUE"
eigen.stuff <- eigen(cov.mat, symmetric=TRUE)
dim(eigen.stuff$vectors)
head(eigen.stuff$vectors[,1:2])
eigen.pcs <- t(t(eigen.stuff$vectors) %*% t(scale(t(data.matrix), center=TRUE)))
eigen.pcs[,1:2]
eigen.data <- data.frame(Sample=rownames(eigen.pcs),
X=(-1 * eigen.pcs[,1]), ## eigen() flips the X-axis in this case, so we flip it back
Y=eigen.pcs[,2]) ## X axis will be PC1, Y axis will be PC2
eigen.data
eigen.var.per <- round(eigen.stuff$values/sum(eigen.stuff$values)*100, 1)
ggplot(data=eigen.data, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC1 - ", eigen.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", eigen.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("eigen on cov(t(data.matrix))")
View(pca)
pca[["sdev"]]
pca[["rotation"]]
pca[["x"]]
## plot pc1 and pc2
plot(pca$x[,1], pca$x[,2])
## make a scree plot
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
## now make a fancy looking plot that shows the PCs and the variation:
library(ggplot2)
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
pca.data
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
pc1_2 <- as.data.frame(principal[,1:2])
write.csv(pc1_2,file = "pc1_2.csv")
colnames(pc1_2) <- c("PC1","PC2")
group_list <- c("K","K","K","aa","aa","aa","bb","bb","bb","ab","ab","ab","f","f","f",
rep("SC_6h",22),rep("SC_4h",13))
#group_list <- c("K","K","K","aa","aa","aa","bb","bb","bb","ab","ab","ab","f","f","f",
#                rep("SC_4h",4))
pc1_2$group <- group_list
qplot(PC1,PC2,data = pc1_2,colour = group)
qplot(PC1,PC2,data = pc1_2)
View(pc1_2)
all_S1 <- all_Sc_combat_fpkm[,c(1:12,19:21)]
all_S <- t(all_Sc_combat_fpkm[,c(26:60)])
data <- t(all_S1)
dat <- scale(data) #标准化
covdat <- cov(dat)  #求协方差矩阵
eigendat <- eigen(covdat)  #求特征值、特征向量
eigenValue <- eigendat$values  #特征值
eigenVector <- eigendat$vectors  #特征向量
order_value <- order(eigenValue,decreasing = T)  #由大到小排列特征值
values <- eigenValue[order_value]
valueSum <- sum(values)
cumVar <- cumsum(values)/valueSum * 100  #计算主成分得分。
order_vector <- eigenVector[,order_value]
Means <- apply(data,2,mean)
sd <- apply(data,2,sd)
data_SC <- data.frame(row.names = rownames(all_S))
for (i in 1:1244) {
data_SC[,i] <- (all_S[,i]-Means[i])/sd[i]
}
rownames(data_SC) <- rownames(all_S)
colnames(data_SC) <- colnames(all_S)
dat_new <- as.matrix(rbind(dat,data_SC))
#rownames(order_vector) <- group_list
#colnames(order_vector) <- paste0("PC",c(1:15))
principal <- dat_new %*% order_vector  #求解主成分
pc1_2 <- as.data.frame(principal[,1:2])
write.csv(pc1_2,file = "pc1_2.csv")
colnames(pc1_2) <- c("PC1","PC2")
group_list <- c("K","K","K","aa","aa","aa","bb","bb","bb","ab","ab","ab","f","f","f",
rep("SC_6h",22),rep("SC_4h",13))
#group_list <- c("K","K","K","aa","aa","aa","bb","bb","bb","ab","ab","ab","f","f","f",
#                rep("SC_4h",4))
pc1_2$group <- group_list
qplot(PC1,PC2,data = pc1_2,colour = group)
qplot(PC1,PC2,data = pc1_2)
qplot(PC1,PC2,data = pc1_2,,colour = group)
qplot(PC1,PC2,data = pc1_2,colour = group)
rm(list = ls())
all_Sc_combat_fpkm <- read.csv(file = "all_Sc_combat_fpkm.csv")
rownames(all_Sc_combat_fpkm) <- all_Sc_combat_fpkm[,1]
all_Sc_combat_fpkm <- all_Sc_combat_fpkm[,-1]
all_S1 <- all_Sc_combat_fpkm[,c(1:12,19:21)]
data <- t(all_S1)
View(data)
dat <- scale(data) #标准化
View(dat)
covdat <- cov(dat)  #求协方差矩阵
View(covdat)
library(ggplot2)
library(ggpubr)
# 对某GO项下所有基因表达绘制提琴图或类似的图的函数
# 多组小提琴图绘制
rm(list = ls())
load("KM_GO.Rdata")
setwd("/Users/xufeng/Desktop/others/Kluyveromyces/countdata2/DEseq_vst/DEseq_DEG.csv/")
load("KM_GO.Rdata")
View(go)
View(go_term2gene)
View(go_term2name)
k_aa <- read.csv(file = "k_aa_DEseq_DEG.csv")
k_bb <- read.csv(file = "k_bb_DEseq_DEG.csv")
ab_f <- read.csv(file = "ab_f_DEseq_DEG.csv")
View(k_aa)
k_aa_FC <- k_aa[,c("X","log2FoldChange")]
k_bb_FC <- k_bb[,c("X","log2FoldChange")]
ab_f_FC <- ab_f[,c("X","log2FoldChange")]
View(k_aa_FC)
k_aa_FC$Group <- c(rep("k_aa"),4720)
k_bb_FC$Group <- c(rep("k_bb"),4843)
ab_f_FC$Group <- c(rep("k_bb"),4859)
View(k_aa)
View(k_bb_FC)
k_bb_FC$Group <- c(rep("k_bb"),4843)
k_aa_FC <- as.data.frame(k_aa[,c("X","log2FoldChange")])
k_bb_FC <- as.data.frame(k_bb[,c("X","log2FoldChange")])
ab_f_FC <- as.data.frame(ab_f[,c("X","log2FoldChange")])
k_aa_FC$Group <- c(rep("k_aa"),4720)
k_bb_FC$Group <- c(rep("k_bb"),4843)
View(k_aa)
View(k_aa_FC)
k_aa_FC$Group <- c(rep("k_aa",4720))
k_bb_FC$Group <- c(rep("k_bb",4843))
ab_f_FC$Group <- c(rep("k_bb",4859))
all_FC <- rbind(k_aa_FC,k_bb_FC,ab_f_FC)
View(all_FC)
e<-all_FC %>%
ggviolin(x = "Group", y = "log2FoldChange", fill = "Group",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"),##
title = "All Genes" font.title = c(30,"red"),
font.y = c(25),
font.subtitle = c(20),
xlab="",
ylab="log2FoldChange",
add = "boxplot", add.params = list(fill = "white"))
e<-all_FC %>%
ggviolin(x = "Group", y = "log2FoldChange", fill = "Group",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"),##
title = "All Genes", font.title = c(30,"red"),
font.y = c(25),
font.subtitle = c(20),
xlab="",
ylab="log2FoldChange",
add = "boxplot", add.params = list(fill = "white"))
e+font("axis.text",size = 25)+geom_hline(aes(yintercept=0),color="#33CCFF",linetype = "dashed")+geom_text(aes(label = paste0("p <= ",p_value),y = 3),vjust = 0)
e+font("axis.text",size = 25)+geom_hline(aes(yintercept=0),color="#33CCFF",linetype = "dashed")
ab_f_FC$Group <- c(rep("ab_f",4859))
all_FC <- rbind(k_aa_FC,k_bb_FC,ab_f_FC)
e<-all_FC %>%
ggviolin(x = "Group", y = "log2FoldChange", fill = "Group",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"),##
title = "All Genes", font.title = c(30,"red"),
font.y = c(25),
font.subtitle = c(20),
xlab="",
ylab="log2FoldChange",
add = "boxplot", add.params = list(fill = "white"))
e+font("axis.text",size = 25)+geom_hline(aes(yintercept=0),color="#33CCFF",linetype = "dashed")
e<-all_FC %>%
ggviolin(x = "Group", y = "log2FoldChange", fill = "Group",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"),##
title = "All Genes", font.title = c(30,"red"),
font.y = c(25),
font.subtitle = c(20),
xlab="",
ylab="log2FoldChange",ylim=c(-3,3),
add = "boxplot", add.params = list(fill = "white"))
e+font("axis.text",size = 25)+geom_hline(aes(yintercept=0),color="#33CCFF",linetype = "dashed")
ggsave(filename = "All_violin"),width = 8.5,height =6.5 )
ggsave(filename = "All_violin",width = 8.5,height =6.5 )
ggsave(filename = "All_violin.pdf", width = 8.5,height =6.5 )
matrix(2,3)
matrix(1:6,2,3)
length(c(1:199))
A = [1 2 3; 4 5 2; 3 2 7]
A = c(1 2 3; 4 5 2; 3 2 7)
as.vector(a)
a <- matrix(1:6,2,3)
as.vector(a)
View(a)
solve(a)
a <- matrix(1:9,3,3)
solve(a)
a <- matrix(2:10,3,3)
solve(a)
a <- matrix(3:11,3,3)
solve(a)
a <- matrix(random(1:10,9),3,3)
a <- matrix(rand(1:10,9),3,3)
a <- matrix(sample(1:10,9,replace = T),3,3)
solve(a)
b <- solve(a)
a*b
class(b)
a^b
axb
a%*%b
diag(3)
seq(1,9,2)
sam
sample(1:10)
edit()
edit(mean())
edit(mean)
edit(prompt)
edit(prcompt)
edit(prcomp)
